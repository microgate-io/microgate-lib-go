// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package queue

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueueingServiceClient is the client API for QueueingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueueingServiceClient interface {
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
}

type queueingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueueingServiceClient(cc grpc.ClientConnInterface) QueueingServiceClient {
	return &queueingServiceClient{cc}
}

func (c *queueingServiceClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/microgate.QueueingService/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueingServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, "/microgate.QueueingService/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueueingServiceServer is the server API for QueueingService service.
// All implementations must embed UnimplementedQueueingServiceServer
// for forward compatibility
type QueueingServiceServer interface {
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	mustEmbedUnimplementedQueueingServiceServer()
}

// UnimplementedQueueingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQueueingServiceServer struct {
}

func (UnimplementedQueueingServiceServer) Publish(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedQueueingServiceServer) Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedQueueingServiceServer) mustEmbedUnimplementedQueueingServiceServer() {}

// UnsafeQueueingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueueingServiceServer will
// result in compilation errors.
type UnsafeQueueingServiceServer interface {
	mustEmbedUnimplementedQueueingServiceServer()
}

func RegisterQueueingServiceServer(s grpc.ServiceRegistrar, srv QueueingServiceServer) {
	s.RegisterService(&QueueingService_ServiceDesc, srv)
}

func _QueueingService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueingServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microgate.QueueingService/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueingServiceServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueingService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueingServiceServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microgate.QueueingService/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueingServiceServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueueingService_ServiceDesc is the grpc.ServiceDesc for QueueingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueueingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "microgate.QueueingService",
	HandlerType: (*QueueingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _QueueingService_Publish_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _QueueingService_Subscribe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "queue.proto",
}

// MessageHandlingServiceClient is the client API for MessageHandlingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageHandlingServiceClient interface {
	HandleMessage(ctx context.Context, in *HandleMessageRequest, opts ...grpc.CallOption) (*HandleMessageResponse, error)
}

type messageHandlingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageHandlingServiceClient(cc grpc.ClientConnInterface) MessageHandlingServiceClient {
	return &messageHandlingServiceClient{cc}
}

func (c *messageHandlingServiceClient) HandleMessage(ctx context.Context, in *HandleMessageRequest, opts ...grpc.CallOption) (*HandleMessageResponse, error) {
	out := new(HandleMessageResponse)
	err := c.cc.Invoke(ctx, "/microgate.MessageHandlingService/HandleMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageHandlingServiceServer is the server API for MessageHandlingService service.
// All implementations must embed UnimplementedMessageHandlingServiceServer
// for forward compatibility
type MessageHandlingServiceServer interface {
	HandleMessage(context.Context, *HandleMessageRequest) (*HandleMessageResponse, error)
	mustEmbedUnimplementedMessageHandlingServiceServer()
}

// UnimplementedMessageHandlingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageHandlingServiceServer struct {
}

func (UnimplementedMessageHandlingServiceServer) HandleMessage(context.Context, *HandleMessageRequest) (*HandleMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleMessage not implemented")
}
func (UnimplementedMessageHandlingServiceServer) mustEmbedUnimplementedMessageHandlingServiceServer() {
}

// UnsafeMessageHandlingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageHandlingServiceServer will
// result in compilation errors.
type UnsafeMessageHandlingServiceServer interface {
	mustEmbedUnimplementedMessageHandlingServiceServer()
}

func RegisterMessageHandlingServiceServer(s grpc.ServiceRegistrar, srv MessageHandlingServiceServer) {
	s.RegisterService(&MessageHandlingService_ServiceDesc, srv)
}

func _MessageHandlingService_HandleMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageHandlingServiceServer).HandleMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microgate.MessageHandlingService/HandleMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageHandlingServiceServer).HandleMessage(ctx, req.(*HandleMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageHandlingService_ServiceDesc is the grpc.ServiceDesc for MessageHandlingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageHandlingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "microgate.MessageHandlingService",
	HandlerType: (*MessageHandlingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleMessage",
			Handler:    _MessageHandlingService_HandleMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "queue.proto",
}
